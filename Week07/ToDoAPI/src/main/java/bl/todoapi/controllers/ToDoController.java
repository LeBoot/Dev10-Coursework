/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bl.todoapi.controllers;

import bl.todoapi.data.ToDoDao;
import bl.todoapi.models.ToDo;
import java.util.List;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

/**
 *
 * @author Boone
 */

//@Rest controller does three things:
    //1) Makes class injectable; therefore, this class will be injected into Spring MVC core dependencies
    //2) Tells spring MVC to scan for methods that can handle HTTP requests
    //3) Tells spring MVC to convert method results to JSON
//@RequestMapping("/api/todo") requires the prefix "/api/todo" on all requests for this class
    //"api" is a preference that indicates that this is a remote API
@RestController
@RequestMapping("/api/todo")
public class ToDoController {

    private final ToDoDao dao;

    //CONSTRUCTOR --------------------------------------------------------------
    //Can take ToDo (impl) as a dependency because that class was marked with "@Repository"
    public ToDoController(ToDoDao dao) {
        this.dao = dao;
    }

    
    //GET (read, get all) ------------------------------------------------------
    //@GetMapping means that this method will be activated for GET requests for the path "/api/todo"
    @GetMapping
    public List<ToDo> all() { //return type will be serialized to JSON in the HTTP response
        return dao.getAll();
    }
    
    
    //GET (read, get by ID) ----------------------------------------------------
    //@GetMapping("/{id}") adds a named dynamic chunk to the base URL
    @GetMapping("/{id}")
    //ResponseEntity<T> is a Spring MVC type to flexibly generate HTTP responses
        //can return a JSON ToDo, but can also send different statuses
    //@PathVariable tells Spring MVC to expect a value, id, in the URL and convert it to an integer
    public ResponseEntity<ToDo> findById(@PathVariable int id) {
        ToDo result = dao.findById(id);
        
        //if ToDo not found for that ID, return "404 Not Found"
        if (result == null) {
            return new ResponseEntity(null, HttpStatus.NOT_FOUND);
        }
        
        //if all is well, return "200 OK" and the result
        return ResponseEntity.ok(result);
    }
    
    
    //POST (create/add) --------------------------------------------------------
    //@PostMapping means that this method will be activated for POST requests
    @PostMapping
    //@ResponseStatus(HttpStatus.CREATED) sets the HTTP status code to "204 Created"
        //for all responses generated by this method
    @ResponseStatus(HttpStatus.CREATED)
    //method takes a ToDo object as a parameter
        //Spring will convert the appropriate data to a ToDo automatically
        //@RequestBody is a similar annotation that is required by @Controller
        //Recall that here, we are using @RestController
    public ToDo create(@RequestBody ToDo todo) {
        return dao.add(todo);
    }
    
    
    //PUT (update) -------------------------------------------------------------
    //@PutMapping means that this method will be activated for PUT requests
    //@PutMapping("/{id}") adds a named dynamic chunk to the base URL
    @PutMapping("/{id}")
    //ResponseEntity is typeless.  In the "get by ID" method, it had a type; what's
        //different now is that here there is no object to return
    //Note the two parameters:
        //1) Read id from the URL
            //Not wholly necessary, but keeps method calls consistent
        //2) Read a full ToDo from the HTTP body (@RequestBody)
    public ResponseEntity update(@PathVariable int id, @RequestBody ToDo todo) {
        //Code "404 Not Found"
        //if the ToDo is not in the system
        ResponseEntity response = new ResponseEntity(HttpStatus.NOT_FOUND);
        
        //if ID from URL and ID from body do not match
        if (id != todo.getId()) {
            //Code "422 Unprocessable Entity": something is wrong with request, so
                //it cannot be completed
            response = new ResponseEntity(HttpStatus.UNPROCESSABLE_ENTITY);
        
        //if update works
        } else if (dao.update(todo)) {
            //Code "204 No Content", meaning that the call was successful, but there
                //is nothing to return
            response = new ResponseEntity(HttpStatus.NO_CONTENT);
        }
        
        return response;
    }

    
    //DELETE (delete) ----------------------------------------------------------
    @DeleteMapping("/{id}")
    //Type-less ResponseEntity
    public ResponseEntity delete(@PathVariable int id) {
        if (dao.deleteById(id)) {
            //Code "204 No Content".  Success! But there is nothing to return
            return new ResponseEntity(HttpStatus.NO_CONTENT);
        }
        //Code "404 Not Found" if the ToDo is not in the system
        return new ResponseEntity(HttpStatus.NOT_FOUND);
    }
}